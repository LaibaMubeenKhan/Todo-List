// Generated by Dagger (https://dagger.dev).
package com.example.roomdb.di;

import android.content.Context;
import com.example.roomdb.singleton.SingletonHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DiModule_ProvideSingleonHelperFactory implements Factory<SingletonHelper> {
  private final DiModule module;

  private final Provider<Context> appContextProvider;

  public DiModule_ProvideSingleonHelperFactory(DiModule module,
      Provider<Context> appContextProvider) {
    this.module = module;
    this.appContextProvider = appContextProvider;
  }

  @Override
  public SingletonHelper get() {
    return provideSingleonHelper(module, appContextProvider.get());
  }

  public static DiModule_ProvideSingleonHelperFactory create(DiModule module,
      Provider<Context> appContextProvider) {
    return new DiModule_ProvideSingleonHelperFactory(module, appContextProvider);
  }

  public static SingletonHelper provideSingleonHelper(DiModule instance, Context appContext) {
    return Preconditions.checkNotNullFromProvides(instance.provideSingleonHelper(appContext));
  }
}
